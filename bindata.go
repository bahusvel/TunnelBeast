// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x7b\x77\xdb\x36\x96\xff\xdb\x3d\xa7\xdf\x01\xcb\x78\x12\x69\xaa\x97\x1f\xca\xa6\x8a\xa8\x59\xd7\x76\xa6\xde\x69\x62\x1f\x3f\xce\x76\x8f\xe3\x99\x40\x24\x24\xa2\x81\x08\x16\x00\x2d\xbb\x8e\xf7\xb3\xef\x01\x40\x90\xe0\x43\x32\xe5\x47\x93\xa6\x93\x36\xb1\x09\x02\x17\xf7\xf1\xbb\x17\xf7\x82\x20\x87\x81\x98\x91\xd1\xb7\xdf\x7c\xfb\xcd\x30\x40\xd0\x1f\x7d\xfb\xcd\xda\x70\x86\x04\x04\x5e\x00\x19\x47\xc2\x75\x62\x31\x69\xbf\x72\xd4\x0d\xee\x31\x1c\x09\xc0\x99\xe7\x3a\x81\x10\x11\x1f\x74\xbb\x1e\xf5\x51\xe7\x97\x5f\x63\xc4\xae\x3b\x1e\x9d\x75\xf5\xaf\xed\xad\xce\x66\x67\xa3\x33\xc3\x61\xe7\x17\xee\x8c\x86\x5d\x3d\x74\x21\x95\x98\xa3\xce\x84\x86\x02\xce\x11\xa7\x33\xa4\x28\x31\x44\x10\xe4\x88\x77\x2f\xfb\x9d\x5e\x67\xbb\xfb\x0b\xef\x42\x42\x8a\xf4\x14\x45\x71\x4d\x90\xa4\xbd\xf6\x5f\x78\x16\x51\x26\x40\xcc\x48\xc3\xd0\x96\x74\x79\x67\x4a\xe9\x94\x20\x18\x61\xae\x88\x7b\x9c\xff\x6d\x02\x67\x98\x5c\xbb\xc7\x74\x4c\x05\x1d\x6c\xf5\x7a\xcd\xd7\x8a\x86\x1c\xd0\x9e\x40\x0f\x81\x1b\x79\xbd\x96\x5c\xcb\xce\x03\xf0\x62\x87\x5d\xd2\x17\xaa\xe3\x1a\x67\xde\x40\x4d\x25\xdb\x7e\xa0\xc4\x3f\x10\x90\x60\xaf\x23\xc4\x44\x93\xba\x55\xfc\xad\x75\x04\x16\xc4\x50\x8b\x28\xc7\x02\xd3\x70\x00\x18\x22\x50\xe0\x4b\xf4\x7a\xd1\x2c\x2d\xc0\x11\xc3\x13\x7d\x5f\xa0\x2b\xd1\x86\x04\x4f\xc3\x01\xf0\x50\x28\x10\xb3\xc6\x71\xfc\x1b\x1a\x80\xad\x7e\xef\x2f\xba\x31\x82\xbe\x8f\xc3\xe9\x00\x6c\xfe\x05\xf4\x40\x4f\x37\x7a\x94\x50\x36\x00\xf3\x00\x0b\x94\x63\x8f\xd0\x29\x0e\xdb\x11\x9c\x1a\x1e\xe7\xd8\x17\xc1\x00\x6c\xbd\xec\x45\x57\x05\x82\x5b\x16\xc1\x19\x64\x53\x1c\x0e\x00\x8c\x05\xcd\x11\x54\x53\xb4\xc7\xf4\x0a\xf9\x77\x48\xfd\x5b\x1b\x87\x3e\xba\x1a\x80\x0d\x7d\x3d\x86\xde\xc7\x29\xa3\x71\xe8\x0f\xc0\xb3\x37\xea\x8f\x99\xeb\xaa\x5d\x66\xcb\x70\xd0\x53\x3c\x80\x7e\x99\xdf\x8d\x57\xa6\x69\x91\x02\xc7\xf4\xaa\xcd\x03\xe8\xd3\xb9\xa4\xd3\x03\x9b\xbd\xe8\x0a\xf4\x00\x9b\x8e\x61\xa3\xd7\x02\xc9\xff\x9d\xcd\x66\x0b\xf4\x40\x3f\xba\x52\x7f\x2b\xee\x6f\xe7\x6d\x3e\x65\xe8\xba\x3d\xc1\x88\xf8\x55\x30\x72\x34\xea\x9c\x16\xe0\x30\xe4\x6d\xcb\xce\x34\x16\x04\x87\x68\x60\x94\x9c\xd3\xc8\x64\x53\xfe\x67\xf8\x66\x3e\x62\x69\xbf\x44\x39\x1b\x3d\x83\x81\x4c\x37\x3d\xb0\xd1\x2f\x2b\x26\xd5\x95\x52\x00\xfe\x4d\xb5\x6a\xa2\xd2\x74\x65\xa5\x11\x34\x11\x25\xcc\x6d\x6c\x26\x64\x8c\xdc\x21\x9c\xa1\xdf\x53\xee\x47\x17\x73\x81\x73\x95\x04\x45\x8c\x51\xf6\x16\x71\x9e\xf9\xcd\x3d\x45\x2d\x99\x2e\xf1\xd4\x67\x3b\x3f\xf4\x7a\xbd\x5e\x99\x95\xed\x3c\x2b\x13\xca\x66\x9f\xdb\xcf\x36\x7b\x9f\xc7\xcf\x70\x18\xc5\xe2\x89\x90\x56\xb2\xcb\x8a\xd0\xeb\xd7\x81\xde\x12\xbb\x2a\xd9\x06\x38\xbc\x84\x04\x1b\x6f\x2a\x6a\xd1\x52\xd2\x66\xbf\x9f\xa9\xe9\xfb\xa6\x45\x88\x23\x82\xbc\xaf\x55\x4b\xe3\x58\x08\x1a\xae\x26\x9c\xc2\xa8\x60\x30\xe4\xd2\x77\x06\x20\x8e\x22\xc4\x3c\xc8\x51\x0d\xd9\xb7\x77\x77\xde\xf4\x17\x79\x6e\x41\xf6\x0a\x29\x8d\x6f\xdb\x4e\x57\x25\xdd\x5a\x7b\x8e\xc6\x1f\x71\xc2\x66\xe2\xd4\x90\x10\xd0\xeb\x6c\x01\x94\xb2\xba\xfc\xae\x17\x33\x2e\x67\x8b\x28\x4e\x1d\xd1\xc4\x2f\x3e\x83\x84\xb4\xbf\x04\xed\xbd\xca\x10\x50\x81\x9c\xb6\x5c\x77\x06\x60\xb3\x84\x9c\x57\x5f\x8c\x4a\xd7\x7c\xcc\x23\x02\xaf\x07\x00\x87\x52\xf4\xf6\x98\x50\xef\xe3\xd2\x70\x68\xc0\x4b\xfd\x6b\xe3\xd9\xb6\x9a\xfe\xf3\xe5\xf8\x55\x3f\x71\xb0\xee\x5f\xc1\x04\x12\x22\xef\x83\x09\x65\x80\x12\x1f\x8c\x19\x9d\x73\xc4\x38\xf8\x6b\xb7\x34\xd8\x48\x29\x39\x81\xac\x3d\x65\xd0\xc7\x28\x14\x0d\x86\xa7\x81\x68\x19\xda\x2d\xf0\xec\xd5\xde\xee\xe6\xcb\x37\xcd\xb2\x95\xda\x33\xfa\xdb\x43\x86\xd3\x07\x0c\x2e\x8e\x14\x54\x25\x1e\x0b\xc7\xd6\xc4\xac\x51\x8a\xc6\xc5\x8c\x52\x11\x28\x10\xc1\x50\x60\x48\x30\xe4\xc8\x4f\x3a\x4a\xd9\x29\xbf\x2a\xf5\x9c\x32\x78\xcd\x3d\x48\xec\xdc\x79\xd8\x35\xb5\xc7\xb0\x9b\xd4\x4f\xdf\x7e\x33\x94\x46\xb5\x4b\x1d\x71\x1d\x21\xd7\x91\x40\xe8\xfe\x02\x2f\xa1\x6e\x55\x25\xd5\xda\x25\x64\xe0\xec\x64\xff\xf8\xdd\xce\xdb\x7d\xe0\x02\xc7\x79\x6d\x5a\x8f\x76\x4e\x4e\xfe\xe7\xf0\x78\x2f\xdf\x7a\x7c\x78\x76\xba\x7f\x02\x5c\x70\x7e\x91\xb5\xed\xef\x1e\x1e\xef\x15\x1a\x25\xd1\xb4\xc9\x34\xce\x60\x04\xdc\x04\x6e\xce\xfe\xf1\xf1\xe1\x31\xd8\xd9\xdd\xdd\x3f\x39\x01\x7b\xfb\xef\x0e\xf6\xf7\x1c\x30\x00\xce\x8e\xe7\x21\xce\x81\x8f\x42\x8c\xfc\x0e\x38\x52\x55\x18\xf0\x64\x75\xe6\x09\x70\x4d\x63\x06\xa0\x3f\xc3\x21\xe6\x82\x41\x41\x59\x07\x0c\xc7\xac\x3b\x52\xff\x38\x2d\x9b\xf6\xfe\xcf\x07\x27\xa7\x27\x8a\xe8\x31\x8d\x05\xe2\x00\x5d\x61\x2e\x78\x46\x34\x40\xde\x47\x4d\x52\xaf\xe3\x3e\x14\x70\x31\xbd\xa3\xc3\xe3\x53\x70\xb8\xbb\x7b\x76\x64\x78\x3d\x92\xc5\x1e\xf5\xbc\x38\xb2\x79\x15\xec\x1a\xc0\x90\x8a\x00\x31\x20\xcb\xc1\xc5\x14\x0f\xde\x1d\x9d\x9d\x2a\x4a\x07\x6a\x7e\x95\xd3\xdd\x97\xbd\x9d\xb3\xd3\x1f\x13\x5a\x1e\x65\x4c\xae\xb8\x31\x47\x0c\x1c\xec\x01\xca\x40\x04\x39\x9f\x53\xe6\x2f\x1e\xff\xee\xf0\x54\xab\x4c\x11\x39\x0d\x10\x60\x52\x6b\x92\x01\x25\x92\xa0\xc0\x47\x04\x09\x04\x30\x07\x21\x15\x5a\x9b\x9d\x45\xe4\x34\x2c\x14\xad\x5d\x1a\x86\xc8\x93\x11\x4d\x12\xd9\x83\x02\x8e\xa5\x7c\x4a\xda\x96\xa2\x8d\x05\x80\x53\x88\x43\x40\xa0\x40\x4b\x4c\xaa\x89\xe6\x2c\x8b\x3c\xca\x7c\x20\xd3\x7e\x09\x92\x09\xc1\x9e\x68\xe5\x4c\x20\x6f\xe5\x28\x2a\xff\x49\x60\x39\x89\x43\xcd\x98\xc7\x10\x14\xa8\x11\x88\x19\x39\x11\xac\x99\xa0\x54\xa2\x76\xc2\xe0\x14\xb8\xc0\xa7\x5e\x3c\x43\xa1\xe8\xe8\x9e\x7b\xc9\xe5\x1b\x06\xa7\xf2\x67\xa3\xa9\x19\x5d\x13\x68\x16\x95\xbb\xef\x13\xa4\x7a\xbd\xf0\xf1\xe5\x8b\xa6\x09\xcd\xb3\xa8\x83\xc3\x10\xb1\x1f\x4f\xdf\xfe\x04\x5c\x90\x4c\x9e\xac\x4e\x01\x26\x08\x34\x54\xa7\x09\x66\x5c\xec\x06\x98\xf8\x86\xb1\x35\xc9\x55\x07\x46\x11\x0a\x7d\x75\xa3\xd4\x51\x53\xb9\x55\xff\x32\x24\x62\x16\x2a\x49\x72\x89\xbb\x11\x5e\xdb\x55\x39\x49\x43\x25\xea\xb6\xfc\x1a\x05\x6e\xe2\xfb\xe7\xea\xbe\x76\x74\x75\x3b\x82\x0c\xce\x38\x70\xc1\x07\x89\x36\xa9\x6c\x77\xfd\xc6\xc4\x94\xdb\xe7\x06\x77\xee\xfa\x8d\x09\x29\xb7\xcf\x3d\x22\x63\xab\xbb\x7e\xa3\x68\x77\x76\xd5\xe5\xed\x73\x4e\x63\xe6\x21\x1c\xa5\x37\x4e\x54\xc3\xc1\xd1\xed\x73\xb5\xd8\x85\x90\x58\x37\xf7\x10\x17\x38\x84\x52\x00\xd9\x03\x5d\xe9\x1e\xd2\xe3\xd2\x3e\xfb\x49\xa3\x74\xd4\x8c\x48\xae\xcb\x41\x68\x75\xf9\x90\xc9\x75\x15\x30\xe0\x82\x10\xcd\xc1\xcf\x6f\x7f\xfa\x51\x88\xe8\x18\xfd\x1a\x23\x2e\x1a\xcd\xac\x8f\x8f\xc8\xbe\x04\x71\x62\x5d\xdb\xec\x53\x24\x92\xd6\x1f\xae\x0f\xfc\x86\x63\xa9\x58\x0d\x71\x9a\x09\x02\xd7\xae\x02\xd6\xa1\x11\x0a\x1b\x2f\x8e\x0e\x4f\x4e\x5f\xb4\x80\xd3\xd5\x9d\x9d\x96\x5c\x78\x39\x4a\x26\x94\xfd\x38\x12\x09\x1b\x3f\x22\xe8\x23\xd6\x90\xbe\x25\x50\x28\xda\x32\xc8\x3b\x2d\xe0\xc0\x28\x22\xd8\x53\x5a\xe9\x5e\xb5\xe7\xf3\x79\x5b\x26\x49\xed\x98\x11\x14\x7a\xd4\x47\x7e\x61\xe2\x90\x21\xe8\x5f\x73\x01\x05\xf2\x02\x18\x4e\xa5\xa5\x0d\x2e\x1a\x29\xda\xf0\x04\x34\x64\x77\xd5\xf9\x44\x76\x06\xae\x0b\xb6\xc1\xf3\xe7\x40\xb1\x25\xa0\x88\xb9\x6c\xda\xec\xf5\xd2\x41\x6b\x0b\x95\x01\x7d\xdf\xd6\x84\x14\x6b\x47\x08\x86\xc7\x12\x80\x4e\x80\x7d\x1f\x85\x52\x18\xc1\x62\x94\xf1\x6b\xb3\xc1\x23\x1a\x72\x74\x8a\xae\x84\x9c\xd5\x39\xfc\x87\x93\x4d\xbb\x56\x30\xcb\xdd\xe4\xf5\x30\xed\x25\xe6\xf2\x36\x37\xeb\x7f\x94\xe7\xc5\xa1\x5c\xd0\x9a\xcd\x85\xd3\x32\x34\xa3\x97\xa8\x3c\x73\x36\x63\x71\x84\x1d\x0c\xf4\x9a\x65\x42\xee\x04\x62\x52\x5c\x62\x64\xc0\xcc\x05\xb6\x3b\x25\x59\x99\xc3\x65\x0c\xce\x60\x74\x5e\x54\x4a\x12\x17\x92\xb0\x73\x6b\x01\x8d\xa3\xd0\x6f\xe8\x58\x91\x50\x67\x68\xc2\x10\x0f\x1a\xe9\xa5\x8e\x51\x12\xf1\x4b\x82\xd4\x19\x47\xac\x1c\xa3\xd4\x42\xe7\xea\xac\xe3\x51\x22\x94\xec\xe9\xae\xdf\xc8\x1f\x4f\x1e\x14\xa4\x48\x75\x63\x82\xec\xfb\x55\xc7\x05\x4b\x19\x5f\x78\x58\x58\xd9\x99\xee\x88\x23\x8b\x19\xcd\x85\x05\xa9\xa0\xa7\x8d\x0a\x9f\xd3\xc9\x79\x40\xe7\x3a\x0f\x51\xab\x73\x0b\x94\x5c\x5d\x26\x49\xc0\xd5\x1c\x7c\x18\x0a\x36\x4a\xa4\x18\x0a\x1f\x78\x04\x72\xee\x3a\xd9\xde\xb7\x63\xee\xae\x95\x52\x0a\xd0\x1e\x81\xca\x34\x61\x50\x9d\x60\x0c\x2a\x13\x06\x33\x79\x57\xf8\x16\x23\xa3\xa1\x8f\x2f\x0d\x37\xf6\x46\x87\x03\x68\xe8\x11\xec\x7d\x74\xed\x84\xa0\xb1\x7e\xa3\xc4\xbc\x6d\xbe\xce\x18\x1e\x62\x43\x60\x02\x39\x98\xc0\xb6\x60\x90\x07\x6d\x48\x84\x33\x1a\x76\xf1\x68\xd8\xf5\xf1\xe5\xe8\xfe\xf3\xcb\x35\x58\xe5\xce\x77\xce\xce\xe4\xec\x01\x82\xec\x8e\x99\x87\x5d\xc1\x46\x1f\xd4\xef\xeb\x0d\xe7\x99\xd2\x16\x77\x9a\x49\x96\xaa\x52\xeb\xe6\x62\xa3\x6b\x5e\x98\xfa\x71\x3f\xb3\x67\x5b\xff\x39\xb3\x2b\x8a\x1d\x4d\xff\x1d\x9c\xa1\x0a\x9b\x81\x1a\xe8\xd1\x64\x72\x48\x49\x20\xa4\xef\x94\xd1\xa2\xdb\x1f\x17\x2e\xf5\x2c\xf6\x14\x78\x89\xf9\x4a\xb3\x47\x24\xe6\x6d\x0f\x33\x8f\xa0\xd5\x50\xa3\xe6\xa8\x0d\x1b\x95\x0e\xc8\x55\xfa\xe1\x91\x22\x59\xed\xef\x6d\x1b\xc5\xca\x63\x5a\xa6\xa0\x19\xc9\x5d\x2d\xbd\xe4\xa0\x52\x2e\xe7\x74\xc1\xec\x9a\x7d\x9b\x25\xe9\x92\xee\x9a\x24\x4c\x65\x3f\x7a\x5e\x3f\x9d\xca\x97\x6f\x55\x0e\x53\xaa\xdf\x2a\xfc\xad\x54\xc0\x55\x78\xd8\x93\x57\x70\x6a\xce\xba\xe9\x9a\xee\xfd\x87\x4f\xd8\xfe\x5c\x75\x97\x76\x90\x7f\x17\x5e\x26\x9e\x98\x6a\xbd\x21\x01\x68\x87\x92\xcc\xab\x25\xd6\x28\x9b\x75\xb2\x96\xce\x25\x24\x31\xca\x1c\xcd\x76\x6f\xd3\xdb\x6e\x2b\xf6\xb7\x5d\xbd\x48\xbd\xaa\xbf\xda\x4c\x34\x9b\xd5\xaa\x55\xc2\xc7\xe2\x87\xa0\x70\x2a\x02\x89\xda\x0c\xd8\x7a\xd0\x77\x2e\x78\x61\x62\x08\x38\x38\x02\x98\x03\x86\x7e\x8d\x31\x43\xfe\xfb\xf0\x85\xbd\x8f\x66\x93\x54\x4c\xd4\x24\xaa\xf6\x89\x97\x93\x55\xa3\x52\x1a\x90\x20\x26\x92\xb6\xc4\xb2\x25\x33\xa5\x56\xbe\x6f\x8d\x9b\x0b\xca\xd9\x45\x29\x14\xdb\x97\xa5\x18\x6c\x5f\xae\x1a\x7c\xa1\xef\xd7\x0d\xbe\x85\x1d\xa3\x25\x81\x17\xfa\x7f\xfc\x78\xbb\xc2\x2e\xe2\x63\x17\xc9\x05\x9b\xfc\x5e\x31\xbc\x38\xed\xdd\x31\xbc\x38\xa2\x62\xef\x0c\xfa\x7e\x31\x7e\xeb\x67\x2a\x22\x40\x8b\x1e\xa9\xdc\x29\xd1\xca\x9c\x2e\x63\xf4\xf7\x0e\xe5\x59\x12\xbf\x42\x5e\xf8\x78\x41\xe6\x4b\xca\xfc\xfe\x1d\x7c\xbe\xfa\xe0\xb3\xb2\xab\x2e\x14\x7d\x06\xa3\x7f\x65\x48\x76\x9a\x3a\xfb\x00\x2e\xa8\x42\xf4\x4a\xd4\x24\xa0\xcb\xf4\x6c\x60\xbf\x7e\x70\x30\xcd\x85\xc6\x1d\x4f\xe0\x4b\x99\xd7\x5e\x52\x86\x85\x79\xc8\xfb\x38\x69\xee\x97\x14\xea\xb2\xfd\xad\xda\x4f\x34\xd3\x0e\x3a\x04\x26\x87\x22\x22\x46\x67\x91\x68\x38\x89\x6a\xd4\x19\x1a\x00\xf5\x13\xe7\x09\x65\xfa\x01\x7d\x5e\x9d\x03\x20\x51\x3a\xbb\x56\xbe\x62\xe0\x25\xad\x67\x13\x76\x41\x18\x13\x92\xa2\xdf\xd6\x69\x75\x66\x97\x2b\xc7\x33\x4a\xf7\xaf\xc3\xff\xb8\x8f\x51\x6b\x16\xe1\x29\x06\xfe\xc8\x41\xf9\x4f\x59\x83\x2f\xca\xdf\xfe\xa4\xf5\xb7\xda\x5b\x2c\x96\xdf\x21\x9a\x1b\xcf\x37\x15\xb2\xd5\x54\x2c\x90\x43\x34\x37\x21\xc1\xea\x9d\x1e\x0b\xaa\x55\x4e\xdb\xe4\x97\x97\xbe\x67\x86\x31\xab\xea\x2d\xd5\xbc\xf6\xfc\xcb\xc9\x1d\x19\xce\x2b\xc9\x7d\xce\x22\xda\x52\x89\xbb\x7e\x63\x5d\xa9\x5b\xd6\x10\xeb\xea\xc1\xa9\x6a\xcd\x07\xa8\xcb\x23\xe3\xd7\xfd\x28\xb9\xf4\x68\xfd\x6b\xcb\x55\x6b\x3f\x4d\x5e\x9e\x0d\xfa\xbe\x02\x9f\x3a\x40\x51\xac\x95\x93\x33\x97\x8f\x59\x2d\x7f\xce\x38\x4a\xe8\x94\xc6\xe2\x0d\x65\xb3\x5c\x28\x2d\x9f\x7f\x5d\x2b\x1f\x7e\x5d\x0c\x34\x95\xfe\xb4\x27\x84\x42\x51\x07\x64\x4b\x49\xa9\x5c\xe5\x71\x68\xa9\xa7\x45\x8f\x47\x4a\x2a\xec\xa1\x74\x66\x30\x7a\x0c\x32\xfa\x75\xc1\x84\xd2\x1d\x6e\xb2\x8c\x08\x8d\x45\x7b\x05\x7e\xee\x84\xd7\x04\x09\x2f\xd0\x07\x8d\x1b\xf6\x32\x7d\x8f\x55\xe5\x83\x5d\x8c\xdc\xb5\x42\x54\x44\x77\x82\xb9\xb0\x43\xfb\xa3\x07\xf7\x85\x3e\xe9\xd1\x90\x53\x82\x3a\x84\x4e\x4b\xb1\xc9\x5a\xd1\xf4\xd9\x00\xe0\x82\xff\x3e\x39\x7c\xd7\x89\x20\xe3\xa8\xb2\xbb\x1a\x90\x1e\x3a\xd7\xa3\x6c\xdd\x84\xd4\x47\xcb\xca\x05\x73\x06\x21\x77\xa4\x56\x0e\xea\x04\x90\xab\x73\xb2\xef\xa8\x2f\xed\x95\xc6\x4b\x75\x53\xa3\x4a\x9f\xab\x55\x0d\x04\x96\x8e\xd5\xaa\x9f\xb2\xfe\x6b\xa8\xc7\x15\xc0\x05\xbd\xd7\x00\x83\x61\xc2\x65\x92\xd0\xbc\x06\xf8\xbb\xef\x52\xe2\x85\xd3\x2d\xfc\x1c\x5f\xb4\x00\xb6\x8f\xea\x56\x83\x4a\x3f\x13\xff\x12\x50\x95\xb0\xf2\x79\xc0\x95\x6d\x53\xd6\x86\x4e\xfa\x6e\x42\x32\x6e\x25\xf0\x98\xa3\x08\x4f\x85\x1e\xb9\x84\xa7\xaf\x4f\x64\x27\xbb\xab\x30\xa5\x59\xa9\x04\x55\x02\x2b\xfb\xfc\x4c\x1e\x58\xd9\x62\xba\x00\x5f\x32\x4b\xfa\x22\xd0\xa5\x18\x49\xb1\xf5\x05\xc6\x2d\xb5\xaa\xd6\xc4\x9e\x79\x05\x46\x8d\x59\x05\x77\xc9\x41\x8f\xa7\x44\x9d\xe2\xad\x02\x71\xae\xc4\xdb\x50\x31\x50\x8d\xb5\xdc\x99\x9b\xfa\x30\x9b\x22\x71\x44\x99\xc8\x83\xac\x3e\x48\xfe\xbe\xaf\x31\x12\x49\x1a\x95\x35\x4b\xe8\x37\x52\xc5\xdf\x65\xcb\x0c\xe5\x92\x5c\x4d\x6b\xd6\x31\x9c\xa4\xd7\xd6\x2f\xbb\x3a\x06\xbd\xbf\xcf\x9a\xa3\x24\xa9\xb4\x98\xf5\x06\x4b\xf2\x8a\xcb\x87\x21\x8d\x94\x51\x54\xc9\xef\x3a\xeb\x37\x6a\xf4\x39\xbe\xb8\x75\x46\xd6\xc5\xb0\xab\xfb\x8d\x3e\x34\x2d\x36\xed\x57\x4e\x24\xdd\x65\x8b\x57\x9a\xa0\x27\xcc\x64\x28\xd0\x83\x72\x19\x93\xdd\x64\xd6\x3b\xab\x2d\x89\x51\x8b\x12\x7b\x1c\x96\xf2\xfa\xd2\x36\x86\xe5\xc3\xf6\x9e\xc9\xa2\x0d\x93\xe2\x6e\x49\xd5\x56\x89\xf4\xa5\x07\xec\x88\x54\x9c\x03\x78\xc0\x86\xc8\xa3\x9d\x2a\x48\xcf\xcf\x89\xe8\xce\xbd\x89\x98\x11\xa9\xdf\x2e\x8c\x45\xe0\x54\x1d\x22\xb3\x16\x90\x6c\x6b\xc4\x5a\x40\x8a\x9b\x22\x72\x56\xed\xf6\x8e\x5c\x1b\x9c\x96\x9c\xa2\x05\x64\x2a\xde\xb4\x7a\xdc\xb5\x22\x68\xf1\xea\x2f\x0b\x7a\xda\xfa\x5b\x15\xaa\x7f\xc5\x5e\x85\x66\xae\x7a\xb3\x82\xcf\xb1\xf0\x82\x74\xac\x15\x65\xb2\xb5\xdc\x93\x95\xb7\xb3\xb3\xf7\xf6\xe0\x9d\x33\x30\x8d\x75\xcb\xbc\xbb\x77\x5d\x6b\x55\x79\x8b\xc9\x24\x44\xf2\xcc\x1e\xfe\xc3\xe2\xd4\xaa\xa6\x8d\xb9\xb3\xc9\xad\xba\xda\x98\xbd\x06\x67\xb9\x82\xaf\xe6\x36\x4b\xdd\x7a\xfd\x21\x1a\x2b\x94\xeb\x0f\x21\x95\x2f\x47\x1f\x42\x29\x2b\xb2\x6b\x50\xb1\x57\x4a\x67\x27\x16\x01\xe0\xb1\x7a\xfd\xd6\xee\x54\xd8\x66\x91\x7f\xc6\x0c\xc1\x8f\xe6\x12\x24\x30\xb0\xde\x42\x1d\x2c\x99\x41\x6f\x32\xd5\x92\x45\xc6\x94\x37\x10\x93\x07\xaa\xc4\x22\x53\xdc\x7e\x2a\x79\xe2\xc5\x02\x21\xd7\x7c\x34\x81\x31\x11\xcb\x24\xd3\xd1\x39\x0e\x79\x84\x3c\x3c\xc1\x52\xc8\xcf\x2d\xa3\x73\x96\x71\xa3\xf9\x73\x16\x08\x78\x5b\xca\xe1\x4c\x9c\x2d\x6f\xbb\x55\x6e\x84\x14\x3e\x8a\x65\x9d\x9a\x56\x9f\x9f\xd2\xc7\xa1\x4f\xe3\x30\x44\xe4\x07\x04\xb9\x50\x43\xf4\xc1\xe7\x42\xff\xec\x7b\x50\x8e\xbe\xb9\x36\x54\x9f\x98\x81\x2a\x0c\xbb\xce\x33\x07\xd0\x90\xc7\xe3\x19\x16\xae\x93\x70\x93\xa5\x00\x22\xc0\xbc\xf9\xda\x01\xd8\x77\xed\xc8\xa1\xcf\x54\x0f\x09\x1c\x23\x02\xb4\x62\x5d\x1d\x34\xcc\xb4\xf6\x07\x75\xf4\xf0\x54\xa9\x32\x01\x18\x0d\xbb\x6a\x70\x42\x48\x6f\x88\x66\xaf\xd6\x3b\xea\x81\xb0\x3a\x26\xaf\x82\x9e\x03\x22\x02\x3d\x14\x50\xe2\x23\xe6\x3a\x67\x69\x73\xb7\x82\x80\x09\x86\x86\x48\x76\x9d\x23\x72\x94\x36\x1b\x22\xc9\xe7\x33\x34\x15\xad\x12\x67\xa4\xa4\x1e\x76\xf5\xbd\xa4\x63\x34\x3a\xa2\x73\xc4\x90\x0f\xc6\xd7\x60\x08\x41\xc0\xd0\x24\xfb\xfe\xd9\x14\x8b\x20\x1e\xab\x2f\x93\x8d\x61\x10\xf3\x4b\x44\xba\x96\xa9\x9c\x91\x75\x31\xec\xc2\xd1\xb0\x1b\x29\xba\xc3\xae\xd4\xad\x31\x92\x65\x42\xeb\x0b\x5c\x5a\x95\x76\xd4\xcd\xab\x5f\x33\xb8\x1b\x33\x86\x42\x01\x74\x36\x38\x48\xa4\x63\x46\x4e\x01\xc7\xc9\x27\xd6\xe4\x85\xfa\x6a\x45\x4a\x95\x3b\xd9\x79\x79\xf3\xe9\x03\x75\x91\x8d\x59\xcd\xec\xa5\x73\x2e\x25\xf3\x5b\xc0\xad\x81\xcd\xf4\xfc\xac\x0d\x4d\x13\xa7\xab\x94\xb1\x22\x4a\x73\xa7\x93\x6a\x41\x35\x61\xc0\x3e\xd2\x92\x20\xcf\x6e\xc9\x61\xcf\x3a\x20\xeb\x00\xe5\xd1\xb9\x36\xb0\xe3\xfb\x0c\x71\x3e\x00\x3f\x83\x4e\xf6\xd7\xd1\x96\x89\xa0\x90\x3d\x5d\xa7\xd1\xf8\xe7\xa7\xf7\x9d\x66\xa3\xb1\xd9\x3f\xef\xb5\xfb\x17\xcd\x4f\x8d\xcd\xf3\x5e\x7b\xfb\xe2\xbd\xdf\xfc\xd4\xd8\x78\xef\xab\x9f\xe7\x1b\xed\xef\x2f\xfe\xf6\xde\x6f\x36\x9b\x37\xdb\xb7\xeb\x4e\x95\xcb\x54\x0b\xa2\x4e\xd3\x14\x44\xd1\x6d\xd5\xc2\x1c\xa9\x7b\x45\x71\xd4\x71\x5d\x26\xd3\xbf\x01\xe8\x81\xff\x03\x2f\xfb\xfd\xad\x7e\x51\x94\x7f\x36\xce\x7b\xed\xef\x2f\x6e\x36\x5a\xdb\xb7\x9f\xce\x37\xda\xfd\x0b\x7d\xbd\x7d\xfb\xe9\xa5\x12\x49\x5f\x6e\xdd\x7e\x7a\xd9\xb7\xae\x37\xe5\xb5\x6c\xd8\xd4\x0d\xf2\x6a\x4b\xeb\x22\x15\xf4\x44\x7f\x2f\xc9\x1c\xc5\x50\xd5\x5d\xe2\x12\xc9\xa7\x94\xb4\x84\xf6\x59\x0d\x65\xf8\x99\x85\x2b\xa9\x1a\xbb\x20\x35\x6e\xa1\x2f\x97\xc5\x8f\x1d\xdf\xcf\x45\x8f\x15\xbc\xdc\xce\x88\xaa\x90\xfd\xbf\x34\x66\xe0\x8d\x39\x2b\xb3\xa2\xb3\x27\xdb\x71\x4f\xe3\xed\xd6\x89\x92\x87\xbb\xbb\xda\x21\xb1\xbd\x3d\x4d\xae\x1f\xc5\xdd\xb3\xa7\x9a\x65\x6f\x37\x0f\xf4\xac\x88\xad\x12\xf1\xc1\x32\x17\x0a\xd1\xfc\x5f\xd9\xc2\xa5\xc1\x65\x3d\xca\x5e\xb4\x96\x2d\xf7\x4b\x49\xb4\xb8\xb0\x59\x0f\xc1\x17\xad\x6d\x4b\x97\xb6\xfb\x43\xd3\x2e\x94\x96\x2d\x40\x6a\x9f\x01\xe0\xd0\x56\x60\x5d\x84\xea\x8d\xbb\x27\xc1\xe7\x12\x93\xaf\x86\x4e\xeb\x21\xa8\x01\x68\x9e\x91\x24\x6f\x4a\xcb\x91\x65\xe6\xf8\xe9\xf0\xef\x87\x67\xa7\x0b\x2d\x62\x38\x1b\x76\x13\x4d\xa8\xef\x14\xe9\x2f\xbe\xfe\x7f\x00\x00\x00\xff\xff\xd1\x12\x3a\x15\xfa\x55\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 22010, mode: os.FileMode(438), modTime: time.Unix(1588558354, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

