// Code generated by go-bindata.
// sources:
// html/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x7d\x6f\x1b\x37\xd2\xff\x5b\xfa\x14\x83\x6d\x1a\x4b\xad\x56\x92\xdd\xa4\x4f\x21\x6b\xf5\x9c\x9b\x38\x4d\xee\x9a\xd8\xf0\x0b\xee\x80\x5c\x00\x53\xbb\x23\x2d\x2f\x14\xb9\x25\xb9\x96\x1c\xc3\xdf\xfd\x40\x72\xa9\xa5\x5e\x6c\x2b\x09\xd0\x1c\xee\x94\xd8\x16\x87\xc3\xe1\xcc\xfc\x66\x86\xc3\xdd\x61\xae\x67\x6c\xd4\x6c\x0e\x73\x24\xd9\xa8\xd9\x18\x2a\x7d\xc3\x70\xd4\x6c\x34\xfe\x42\x67\x85\x90\x1a\x4a\xc9\x5a\xb9\xd6\x85\x1a\xf4\x7a\x13\xc1\xb5\xea\x4e\x85\x98\x32\x24\x05\x55\xdd\x54\xcc\x7a\xa9\x52\xff\x3f\x21\x33\xca\x6e\x92\x33\x31\x16\x5a\x0c\x7e\xea\xf7\xdb\x87\xcd\x66\xa3\xd1\x65\x62\x4a\x79\x5c\x90\x29\xc2\x6d\xb3\xd1\x68\xcc\x69\xa6\xf3\x01\xfc\xf4\x73\xbf\x58\x1c\x1a\x42\x41\xb2\x8c\xf2\xe9\x00\x7e\xf9\x1e\xfa\xd0\xb7\xb4\x19\x91\x53\xca\x07\x40\x4a\x2d\x0c\xe1\xce\x8a\x9a\xe7\x54\x63\x3c\x16\x0b\xcc\x9c\xac\x42\x28\xaa\xa9\xe0\x03\x90\xc8\x88\xa6\xd7\x68\x57\x7f\x8a\x29\xcf\x70\x31\x80\x7d\x3b\x1c\x93\xf4\xe3\x54\x8a\x92\x67\x03\xf8\xee\x95\xfd\x54\x9b\x2c\xe2\x0d\x6d\xfc\xce\x7d\xbb\x37\xec\xf7\x37\xd4\x3c\xf0\x14\x8d\x0b\x1d\x13\x46\xa7\x7c\x00\x29\x72\x8d\xd2\x6d\x27\x16\xb1\xca\x49\x26\xe6\x46\x4a\xdf\xf2\x43\x1f\xe4\x74\x4c\x5a\xfd\x0e\x54\xff\xbb\x07\xed\x0e\xf4\xe1\x79\xb1\xb0\x3f\x5b\xe6\x9f\xb5\x6b\xcb\xa7\x12\x6f\xe2\x09\x45\x56\x19\x6e\x50\x88\x9d\xc7\x07\x10\x39\x9f\x47\x1d\x50\x84\xab\x58\xa1\xa4\x13\xab\x89\x28\x35\xa3\x1c\x07\x95\x53\x57\xfc\x30\x39\x30\xff\x0e\x03\x44\xf6\xfb\xfd\xef\x2b\x03\x64\x86\x72\xb0\x06\x85\x31\x65\xff\xf9\xba\x33\xf6\xbd\x33\xac\xd5\xf4\x93\x25\x3a\x01\x06\xa8\xc3\xa5\xb2\x8a\x7e\xc2\x01\xec\x1f\x38\x76\x6b\xd5\x44\xc8\xd9\xff\x16\x8e\x94\x17\xa5\xfe\x4f\x43\xf0\xf9\xe7\x21\xf8\x2c\x40\x50\x21\xc3\xf4\xbf\xc9\xa0\x71\xa9\xb5\xe0\x9f\x63\x90\x0d\x1e\x2d\x09\x57\x26\x9c\x07\x50\x16\x05\xca\x94\x28\x7c\xd4\xdc\x67\x2f\x8e\x5e\x3d\xef\xef\x60\xee\xa6\x65\xa9\x60\x42\xae\x26\xc1\x16\x8b\x1a\xf1\x1c\xc7\x1f\x69\xa5\x5e\x95\x60\x84\x31\xe8\x77\x7f\x02\xf4\x2a\x3e\x38\x99\x96\x52\x99\x9d\x0a\x41\x7d\x5e\xb8\x82\x94\x21\x43\x53\x8b\xbf\xb1\xbf\xee\x8f\x8e\x98\xe1\x44\x07\xf5\x69\xb3\x62\x7d\x4b\x27\x36\x32\xaa\x0a\x46\x6e\x06\x40\xb9\x31\x38\x1e\x33\x91\x7e\xac\xc3\x50\x64\x37\xce\xa9\x2b\x1e\xf8\xbf\x9f\xc7\xbf\x3c\x77\x09\xd2\xfb\x01\x26\x84\x31\x33\x0d\x13\x21\x41\xb0\x0c\xc6\x52\xcc\x15\x4a\x05\x3f\xf4\xd6\x97\x7a\x23\xcc\x5e\x44\xc6\x53\x49\x32\x8a\x5c\xb7\x24\x9d\xe6\xba\xe3\x25\x77\xe0\xbb\x5f\x5e\xbe\x38\xf8\xf9\x55\x7b\xc3\xfb\xf1\x4c\x7c\xfa\x8a\xd5\xe2\xcb\xd7\xae\x2f\xd4\x02\x0c\xb4\xf7\x2d\xdd\x2d\x0a\xbd\x3f\x1c\xe0\x33\x21\x74\x6e\x83\x83\x70\x4d\x09\xa3\x44\x61\xe6\xf8\x8c\xd9\x42\x2d\x36\x18\xa7\x92\xdc\xa8\x94\x30\x74\x98\x35\x86\xbd\xaa\x6b\x1a\xf6\x5c\x1b\xd5\x1c\x1a\x10\x6d\x3b\x95\x4a\x5a\x68\xd0\x37\x05\x26\x91\x09\xff\xde\xbf\xc8\x35\x71\xd4\xc8\xb4\x59\xd7\x44\xc2\xe5\xf9\xf1\xd9\xbb\xa3\xb7\xc7\x90\x40\x14\x1d\x56\xc4\xd3\xa3\xf3\xf3\xbf\x9f\x9c\xbd\x5c\x21\x9e\x9d\x5c\x5e\x1c\x9f\x43\x02\xef\x3f\xd8\x06\x6b\x52\xf2\xd4\x04\x1e\xa4\x12\x89\xc6\x96\xe9\xe6\xce\xb5\x6c\xbb\xf8\x31\x2b\x26\x92\x4c\x21\x81\x4c\xa4\xe5\x0c\xb9\xee\x3a\xc6\x97\xd5\xf0\x95\x24\x53\xf3\xb7\xd5\xee\x98\x05\x0d\x8d\xb3\x62\x93\xfb\x98\xa1\x65\xda\xcb\xe8\xf5\x5e\xbb\xca\xe4\x59\xd1\xa5\x9c\xa3\x7c\x7d\xf1\xf6\x77\x48\xa0\xda\xd9\x65\x68\x4e\x19\x42\xcb\xf2\x4c\xa8\x54\xfa\x45\x4e\x59\x56\x29\xd5\x30\x1a\x75\x49\x51\x20\xcf\x2c\x7d\x83\xcf\xca\xb8\x33\xbf\x24\xea\x52\x72\x6b\x43\xdd\x38\x78\x93\x5d\x15\x3a\x13\xa5\xc6\x96\x6d\x15\x02\xab\xa5\xa1\x42\x52\xf9\xeb\xbd\x9d\x76\x1e\x6b\xa4\x82\x2b\xc1\xd0\xb4\xa6\x2d\xcb\xe6\x5a\x55\xbb\xac\x20\x92\xcc\x14\x24\x70\x55\x2a\x94\x9c\xcc\x30\x79\x72\xeb\xd1\xb9\x7b\x5a\x10\xa5\xe6\x42\x66\xc9\x93\x5b\x8f\xce\xdd\x53\x25\x4a\x99\x22\x2d\x92\x27\xb7\x56\x5c\xf7\xdc\x12\xde\x9c\xde\x3d\xb5\x19\xcf\x09\x0b\x26\x5f\xa2\xd2\x94\x13\x63\x80\xe1\xc0\x85\xe3\x30\x9d\xf6\x92\xe7\xb8\x22\x9e\x0a\xa9\x6b\x21\x2b\x2c\x6f\x78\xc0\x72\x55\x1b\xb0\xc8\x25\x24\xc0\x71\x0e\xff\x78\xfb\xfb\x6b\xad\x8b\x33\xfc\xa3\x44\xa5\x5b\xce\xa9\x8b\x5c\x76\x45\x81\xbc\xb5\x77\x7a\x72\x7e\xb1\xd7\x81\xa8\xe7\xbc\x18\x75\x4c\x45\x51\xde\x17\x86\x4f\xa1\xae\x16\xbf\x46\x92\xa1\x6c\x45\x2f\x04\xd7\xc8\x75\x6c\x82\x39\xea\x40\x44\x8a\x82\xd1\xd4\xda\xd2\x5b\xc4\xf3\xf9\x3c\x36\x55\x3d\x2e\x25\x43\x9e\x8a\x0c\xb3\xa8\xde\x55\x21\xcf\x5a\xce\xbd\xed\x4d\x1c\x0c\x87\x44\x55\x08\xae\xf0\x02\x17\xba\x62\x91\x38\x91\xa8\xf2\x4a\x79\x1f\x0c\x46\xcf\xcd\x68\x50\xb9\x98\xbb\x58\xb0\x1e\xea\xc0\x7a\x48\x98\x00\x85\xc4\x46\xe0\xd5\x30\xa3\xd7\x90\x32\xa2\x54\x12\xd5\xdd\xb5\xcd\xc7\xea\x33\x2c\xc0\xe6\x74\x12\xf9\x62\xed\x6a\x75\xc8\xb3\x01\x38\xc4\x23\xd8\x0a\xe2\x60\x3b\xfc\x83\xad\x70\x06\x4a\xf4\x8a\x50\xa5\x40\xe9\x95\x13\x38\x02\xc1\x53\x46\xd3\x8f\x9e\xee\xfc\xf0\xe4\xd6\xba\xe0\xae\x7d\x18\x2a\x1d\x87\xe2\x33\x7a\xed\xa7\xdc\xe0\xaa\x19\xd6\x0d\x93\xf4\x90\x84\xb5\xc5\x21\xb1\x2c\x0f\x53\xd4\x55\x6d\xf8\xf5\xe6\x4d\xd6\x8a\xac\x35\x2a\x6a\xaf\xa4\xb7\x97\xd4\xde\x04\x8d\x64\x99\xd3\xd5\x04\x4e\x80\x55\x9d\x38\x90\x98\x13\x6e\xd6\xad\x29\xdd\x6b\xc2\x4a\x77\xb6\x1a\xd6\x30\x83\x3c\x73\x48\x5b\x63\x0f\xb3\x69\x5d\x76\xc8\xfe\x35\x15\x61\x25\xed\xeb\xc1\x46\xb6\x87\xc3\x8d\x3c\x0f\x87\x5f\x97\xe1\x24\xcb\xbe\x41\x7a\x7f\x4e\xee\x32\x31\x15\xa5\x7e\x25\xe4\x2c\x0c\x84\x8d\x53\xb1\xb1\x71\x24\x3e\x12\x89\xf1\x84\x09\xa2\xa3\xb6\x31\xf6\x48\x6b\x49\xc7\x26\xd6\xa2\x9c\x66\x19\x72\x63\xa2\x96\x25\x46\x8f\xc4\xf4\x8c\x14\x46\xa9\xaf\x94\xe2\x1e\x84\x54\x82\x24\xce\xc4\x35\x6e\xca\x7a\x5c\x86\x28\x75\xbc\xbb\x36\x0f\x7b\x7d\x82\x3a\xcd\x6d\xfa\xa9\x56\x90\x7b\x5f\x10\xf1\x5f\x15\x9e\x8c\x2a\x1d\xc6\xe7\x9f\x11\xa0\x8f\x1f\x3f\x61\x1f\x61\x9c\xf1\xd7\xf3\x93\x77\xdd\x82\x48\x85\xf7\x1d\x56\xcb\xd6\xcc\xad\xa9\x5d\xc2\x45\x86\x61\x4f\x75\x5f\xd1\x0c\x3a\x27\xb3\xa4\x9b\x13\x65\x0b\xe8\x3b\x91\x19\x84\x7c\xfb\x64\xe7\x5c\x04\xb9\xfa\x6a\x09\x8c\xac\x75\x4f\xae\x1d\x96\xd0\xb2\x55\x0f\x12\xe8\x1f\x02\x85\x61\xa5\x5d\x97\x21\x9f\xea\xfc\x10\xe8\x8f\x3f\x7a\xc1\x6b\x27\xa8\x7a\x4f\x3f\x74\x80\xd6\xdd\xd8\x6a\xf4\x4c\x51\x9b\xd3\x6a\x25\x74\x76\x06\xff\xb7\x63\x87\xbd\x29\x6e\x2a\x00\x3f\x04\x6b\xf7\x36\xc1\x46\xad\x91\xb4\x13\x4e\xbb\x40\x62\xa4\xc5\xee\xf9\x46\xd4\x6e\xfe\x39\xc0\x58\x0b\xb6\xe1\x12\x74\xf1\xd5\x49\x7c\x35\x14\x85\x05\xc1\x1e\x56\x49\xf4\xe4\xd6\x2e\x7e\x4f\x3f\xdc\x45\xa3\x60\x30\xec\x39\xbe\xd1\x55\xbb\xd6\x70\xfd\x68\xbe\x0f\xe0\x65\x01\x77\x6a\xd4\x78\xbb\x9b\x56\x58\x3c\xb6\x56\x74\xca\xd7\x0b\xba\x3d\xae\xa5\x14\xb2\xae\xdf\x86\xe4\xcb\x8c\x3f\x8e\xfd\x78\xed\xe4\xf6\x85\xc7\xb3\xf9\x71\xc0\x46\x27\xd0\x5a\xae\x76\x9e\x84\x24\x81\xbe\xf7\xa4\xdb\xfc\xc7\x04\xf6\x2e\xfd\x9e\x54\x81\xc4\x3f\x4a\x2a\x31\xfb\x27\xdf\xab\x6f\x1e\x46\xd4\x72\x87\x07\x45\x9d\x7a\xbd\x1e\x12\x65\xd9\xfd\x5a\xc2\x50\xea\x8a\x64\xd9\x36\x0a\xb5\x5b\xe8\xba\x56\x5d\x3c\x94\x53\xd6\x81\x92\x19\x8f\xf6\x48\xa9\xf3\xe8\xf0\xc1\x3a\xee\xbf\xae\xd4\x71\xff\xd5\xd4\xf1\x46\xa3\x61\xb6\x74\x79\x1a\x99\x22\x1d\x75\xcc\x06\x1d\x30\xe7\x4a\xbb\x66\x78\xac\x3c\x5b\xbb\x76\x2e\xd1\x6e\x4f\x2e\x91\x64\x37\x4a\x13\x8d\x69\x4e\xf8\xd4\x86\x44\x15\x52\x3e\x0e\xad\x3b\x2d\xbb\x65\x3e\x37\xcc\x06\x99\x67\xf0\xf4\x29\x38\xcd\x34\xd1\xa5\x32\xb4\x83\xfe\x12\xaf\x70\x59\x5d\x12\x0c\x53\x74\xf2\xb7\x68\xc9\x15\x36\x1d\xde\x57\x87\xd5\x54\xd0\x7d\x78\x8f\xf9\xa9\xdd\x8e\xfd\xed\x27\xb6\xef\xc7\xc3\x83\x7b\xf7\xce\xe6\xe1\x56\x62\xf7\x6e\xe2\xcb\xe5\xd4\xfd\xd1\xa3\x32\xc2\x5a\x1e\x1d\x95\x3a\x07\x55\xa6\x29\x2a\x55\xb3\xac\xb6\x8d\x8d\xc6\x1d\x20\x53\x08\xf7\xa3\x77\x7c\x76\x76\x72\x06\x47\x97\x17\xaf\x03\x14\x37\x37\x9a\x10\xca\x96\xd1\x56\xe5\x97\xfb\x7d\x17\x84\xf4\x5a\x8f\xb0\xd9\x3f\x35\x86\x3d\xf7\xec\x66\xd4\x6c\xae\x5c\xc8\xea\x17\x5d\x91\x99\x6a\x0c\xed\xfb\x0d\x62\x43\x37\x89\xbe\x33\x57\x34\x55\x8e\x67\x54\x27\x51\x25\xb5\x2e\x91\x3a\xa7\xaa\x7d\x18\x01\xcd\x92\x30\x60\xec\xcd\x6c\xe8\xde\x1a\xd4\xcf\x8f\x22\xb0\xa9\x1c\xf9\xe8\x8c\xa0\x60\x24\xc5\x5c\xb0\x0c\x65\x12\x5d\x2e\xc9\xbd\xcd\xf5\x3e\x6c\xbd\x8c\x7a\xbc\x22\xe3\x74\x49\xae\x64\x54\x0f\x7a\x9d\x10\x67\x46\x34\xb2\x9a\x0e\x7b\x6e\xce\xf1\x15\xa3\x53\x31\x47\x89\x19\x8c\x6f\x60\x48\x20\x97\x38\x49\x22\xff\xf2\x70\x4a\x75\x5e\x8e\xed\x2b\xc3\x31\xc9\x4b\x75\x8d\xac\x77\x51\x72\x8e\xec\x57\x24\x4a\x47\xa3\x60\x30\xec\x91\x51\x75\xfb\x1d\xf6\x8c\x37\x9c\x53\x03\x87\x07\xaf\x03\x9d\xe7\xc2\xbc\x00\x17\x79\x89\xcb\x29\xab\xdc\x8b\x52\x4a\x73\x9d\x75\x67\xd6\xc0\xd9\x25\x2b\x03\x8d\xdc\xa5\x0c\x55\x79\xde\xdf\x8e\xab\x2f\xbb\xa1\xba\xbc\xd1\x86\xa0\xfa\x14\xd9\xa2\xd6\xbd\xf8\xd6\xf7\xc6\x35\x74\xfc\xb3\x02\x78\x73\xba\x15\xe4\x6d\x42\x4c\x47\x70\x9f\x98\x53\x3b\xd7\x1b\xc1\xb9\x7b\x9f\xe3\x6f\xa5\xb6\x21\x71\x7e\xaa\xde\xf4\x38\x99\xe1\xad\x35\xb2\x47\x71\x60\xa0\xb1\x36\x6c\x9e\x46\xcd\x26\xd8\x8f\x71\xa3\xa3\x3d\x10\x52\x47\x59\x16\x06\x54\x88\xfc\x2e\xe9\xe4\xef\x90\xde\xf5\x2b\xde\xf6\xd9\xb5\xac\x79\x0f\xe8\xf1\xfb\xc9\x6f\x27\x97\x17\xdb\x55\xf1\x61\x51\xfd\x1d\xf6\xdc\x93\xde\xe6\xb0\xe7\xde\xa4\xff\x3b\x00\x00\xff\xff\x10\x9b\xf3\x4b\x51\x1f\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 8017, mode: os.FileMode(420), modTime: time.Unix(1503288108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/index.html": htmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

